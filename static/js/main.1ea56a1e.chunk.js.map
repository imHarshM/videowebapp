{"version":3,"sources":["images/games-of-thrones.jpg","images/archer.jpg","images/mrrobot.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","useState","activeTab","setActiveTab","activemaintab","setActiveMainTab","data","setData","useEffect","getData","i","fetch","method","headers","Headers","Accept","then","res","json","response","totalSeasons","parseInt","catch","error","console","log","toggle","tab","toggleMainTab","dropdownOpen","setDropdownOpen","className","Date","toLocaleDateString","day","month","hour","minute","Nav","tabs","NavItem","NavLink","classnames","active","onClick","TabContent","TabPane","tabId","Dropdown","isOpen","prevStateDrop","DropdownToggle","caret","DropdownMenu","DropdownItem","Title","episodes","imdbRating","alt","src","gamesOfThrones","archer","mrRobot","Array","map","e","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,8C,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,2UC0Q5BC,EAvPH,SAACC,GAAW,IAAD,EACaC,mBAAS,KADtB,mBACdC,EADc,KACHC,EADG,OAEqBF,mBAAS,QAF9B,mBAEdG,EAFc,KAECC,EAFD,OAGGJ,mBAAS,IAHZ,mBAGdK,EAHc,KAGRC,EAHQ,KAKrBC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAU,SAACC,GACVA,IAAGA,EAAI,aACZC,MAAM,8BAAD,OAA+BD,EAA/B,oBAAoD,CACvDE,OAAQ,MACRC,QAAS,IAAIC,QAAQ,CACnBC,OAAQ,2CAGTC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLA,EAASC,aAAeC,SAASF,EAASC,cAC1Cb,EAAQY,MAETG,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,OAG5BG,EAAS,SAACC,GACVzB,IAAcyB,GAAKxB,EAAawB,IAGhCC,EAAgB,SAACD,GACjBvB,IAAkBuB,GAAKtB,EAAiBsB,GAC5ClB,KA/BmB,EAkCmBR,oBAAS,GAlC5B,mBAkCd4B,EAlCc,KAkCAC,EAlCA,KAuCrB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,SAAd,SACQ,uCAER,yBAAKA,UAAU,aACb,0BAAMA,UAAU,QACd,uBAAGA,UAAU,wBACZ,IAAIC,MAAOC,mBAAmB,QAXpB,CAAEC,IAAK,UAAWC,MAAO,QAASC,KAAM,UAAWC,OAAQ,cAc1E,yBAAKN,UAAU,aAAf,aACY,uBAAGA,UAAU,eACvB,0BAAMA,UAAU,iBACd,uBAAGA,UAAU,oBAInB,yBAAKA,UAAU,WACb,kBAACO,EAAA,EAAD,CAAKC,MAAI,EAACR,UAAU,kBAClB,kBAACS,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEV,UAAWW,IAAW,CAAEC,OAA0B,SAAlBvC,IAChCwC,QAAS,WACPhB,EAAc,UAGhB,uBAAGG,UAAU,eANf,SAUF,kBAACS,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEV,UAAWW,IAAW,CAAEC,OAA0B,aAAlBvC,IAChCwC,QAAS,WACPhB,EAAc,cAGhB,uBAAGG,UAAU,qBANf,cAUF,kBAACS,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEV,UAAWW,IAAW,CAAEC,OAA0B,WAAlBvC,IAChCwC,QAAS,WACPhB,EAAc,YAGhB,uBAAGG,UAAU,eANf,YAWJ,wBAAIA,UAAU,gCACZ,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,YACX,uBAAGA,UAAU,mBADf,aAON,yBAAKA,UAAU,gBACb,kBAACc,EAAA,EAAD,CAAYzC,cAAeA,GACzB,kBAAC0C,EAAA,EAAD,CAASC,MAAM,OAAOhB,UAAWW,IAAW,CAAEC,OAA0B,SAAlBvC,KAAtD,gBAGA,kBAAC0C,EAAA,EAAD,CAASC,MAAM,WAAWhB,UAAWW,IAAW,CAAEC,OAA0B,aAAlBvC,KACxD,kBAACkC,EAAA,EAAD,CAAKC,MAAI,GACP,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEV,UAAWW,IAAW,CAAEC,OAAsB,MAAdzC,IAChC0C,QAAS,WACPlB,EAAO,OAHX,cASF,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEV,UAAWW,IAAW,CAAEC,OAAsB,MAAdzC,IAChC0C,QAAS,WACPlB,EAAO,OAHX,YASF,yBAAKK,UAAU,gBACb,0BAAMA,UAAU,QAAhB,UACA,kBAACiB,EAAA,EAAD,CAAUC,OAAQpB,EAAcH,OAhGvB,kBAAMI,GAAgB,SAACoB,GAAD,OAAoBA,OAiGjD,kBAACC,EAAA,EAAD,CAAgBC,OAAK,GAArB,UACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,eACA,kBAACA,EAAA,EAAD,4BACA,kBAACA,EAAA,EAAD,gCAKR,kBAACT,EAAA,EAAD,CAAY3C,UAAWA,GACrB,kBAAC4C,EAAA,EAAD,CAASC,MAAM,KACb,yBAAKhB,UAAU,WACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,8BACb,yBAAKA,UAAU,aACb,6BACE,4BAAKzB,EAAKiD,OACV,0BAAMxB,UAAU,MAAMzB,EAAKc,aAA3B,YACA,0BAAMW,UAAU,MAAMzB,EAAKkD,SAAWlD,EAAKkD,SAAW,KAExD,yBAAKzB,UAAU,kBACb,uBAAGA,UAAU,OAAb,eAAgCzB,EAAKmD,WAArC,OACA,uBAAG1B,UAAU,OAAb,qBAGJ,yBAAKA,UAAU,eACb,yBACE2B,IAAI,QACJC,IACErD,EACmB,oBAAfA,EAAKiD,MACHK,IACe,WAAftD,EAAKiD,MACLM,IACAC,IACFF,SAMd,yBACE7B,UAAU,yCACVa,QAAS,WACPnC,EAAQ,eAGV,yBAAKsB,UAAU,oBACb,yBAAKA,UAAU,aACb,yBAAK2B,IAAI,QAAQC,IAAKE,OAExB,yBAAK9B,UAAU,cACb,0BAAMA,UAAU,MAAhB,WAEF,yBAAKA,UAAU,gBACb,0BAAMA,UAAU,SAAhB,0BAIN,yBACEA,UAAU,yCACVa,QAAS,WACPnC,EAAQ,eAGV,yBAAKsB,UAAU,oBACb,yBAAKA,UAAU,aACb,yBAAK2B,IAAI,QAAQC,IAAKG,OAExB,yBAAK/B,UAAU,cACb,0BAAMA,UAAU,MAAhB,cAEF,yBAAKA,UAAU,gBACb,0BAAMA,UAAU,SAAhB,2BAKR,yBAAKA,UAAU,0BACZ,YAAIgC,MAAMzD,EAAKc,eAAe4C,KAAI,SAACC,EAAGvD,GAAJ,OACjC,yBAAKqB,UAAU,wCACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,kBACb,0BAAMA,UAAU,eAAhB,UAAsCrB,EAAI,GAC1C,0BAAMqB,UAAU,QAAhB,SAEF,yBAAKA,UAAU,eACb,yCACA,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,UACb,0BAAMA,UAAU,QAAQzB,EAAKmD,uBAU/C,kBAACX,EAAA,EAAD,CAASC,MAAM,QAGnB,kBAACD,EAAA,EAAD,CAASC,MAAM,SAAShB,UAAWW,IAAW,CAAEC,OAA0B,WAAlBvC,KAAxD,sBCrPU8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9D,MAAK,SAAA+D,GACJA,EAAaC,gBAEd1D,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM0D,c","file":"static/js/main.1ea56a1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/games-of-thrones.85d559bc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/archer.2eadac8a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mrrobot.07ae284b.jpg\";","import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.scss\";\nimport {\n  Nav,\n  NavItem,\n  NavLink,\n  TabContent,\n  TabPane,\n  Dropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from \"reactstrap\";\nimport classnames from \"classnames\";\nimport gamesOfThrones from \"../src/images/games-of-thrones.jpg\";\nimport archer from \"../src/images/archer.jpg\";\nimport mrRobot from \"../src/images/mrrobot.jpg\";\n\nconst App = (props) => {\n  const [activeTab, setActiveTab] = useState(\"1\");\n  const [activemaintab, setActiveMainTab] = useState(\"home\");\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = (i) => {\n    if (!i) i = \"tt0944947\";\n    fetch(` http://www.omdbapi.com/?i=${i}&apikey=ab159589`, {\n      method: \"GET\",\n      headers: new Headers({\n        Accept: \"application/vnd.github.cloak-preview\",\n      }),\n    })\n      .then((res) => res.json())\n      .then((response) => {\n        response.totalSeasons = parseInt(response.totalSeasons);\n        setData(response);\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const toggle = (tab) => {\n    if (activeTab !== tab) setActiveTab(tab);\n  };\n\n  const toggleMainTab = (tab) => {\n    if (activemaintab !== tab) setActiveMainTab(tab);\n    getData();\n  };\n\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n\n  const toggleDropdown = () => setDropdownOpen((prevStateDrop) => !prevStateDrop);\n  const DATE_OPTIONS = { day: \"numeric\", month: \"short\", hour: \"numeric\", minute: \"numeric\" };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"title\">\n          Watch <span>This</span>\n        </h1>\n        <div className=\"date-time\">\n          <span className=\"mr-1\">\n            <i className=\"fa fa-clock-o mr-1\"></i>\n            {new Date().toLocaleDateString(\"en-US\", DATE_OPTIONS)}\n          </span>\n        </div>\n        <div className=\"user-name\">\n          User Name <i className=\"fa fa-user\"></i>\n          <span className=\"search-option\">\n            <i className=\"fa fa-search\"></i>\n          </span>\n        </div>\n      </header>\n      <div className=\"sidebar\">\n        <Nav tabs className=\"sidebar-option\">\n          <NavItem>\n            <NavLink\n              className={classnames({ active: activemaintab === \"home\" })}\n              onClick={() => {\n                toggleMainTab(\"home\");\n              }}\n            >\n              <i className=\"fa fa-home\"></i>\n              Home\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              className={classnames({ active: activemaintab === \"tvseries\" })}\n              onClick={() => {\n                toggleMainTab(\"tvseries\");\n              }}\n            >\n              <i className=\"fa fa-television\"></i>\n              TV Series\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink\n              className={classnames({ active: activemaintab === \"movies\" })}\n              onClick={() => {\n                toggleMainTab(\"movies\");\n              }}\n            >\n              <i className=\"fa fa-film\"></i>\n              Movies\n            </NavLink>\n          </NavItem>\n        </Nav>\n        <ul className=\"list-unstyled sidebar-option\">\n          <li className=\"nav-item\">\n            <a className=\"nav-link\">\n              <i className=\"fa fa-sign-out\"></i>\n              Logout\n            </a>\n          </li>\n        </ul>\n      </div>\n      <div className=\"main-content\">\n        <TabContent activemaintab={activemaintab}>\n          <TabPane tabId=\"home\" className={classnames({ active: activemaintab === \"home\" })}>\n            Home Content\n          </TabPane>\n          <TabPane tabId=\"tvseries\" className={classnames({ active: activemaintab === \"tvseries\" })}>\n            <Nav tabs>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: activeTab === \"1\" })}\n                  onClick={() => {\n                    toggle(\"1\");\n                  }}\n                >\n                  My Series\n                </NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink\n                  className={classnames({ active: activeTab === \"2\" })}\n                  onClick={() => {\n                    toggle(\"2\");\n                  }}\n                >\n                  Popular\n                </NavLink>\n              </NavItem>\n              <div className=\"sort-options\">\n                <span className=\"mr-2\">Sort :</span>\n                <Dropdown isOpen={dropdownOpen} toggle={toggleDropdown}>\n                  <DropdownToggle caret>Select</DropdownToggle>\n                  <DropdownMenu>\n                    <DropdownItem>A to Z</DropdownItem>\n                    <DropdownItem>Z to A</DropdownItem>\n                    <DropdownItem>Rating(Low to High)</DropdownItem>\n                    <DropdownItem>Rating(High to Low)</DropdownItem>\n                  </DropdownMenu>\n                </Dropdown>\n              </div>\n            </Nav>\n            <TabContent activeTab={activeTab}>\n              <TabPane tabId=\"1\">\n                <div className=\"row m-0\">\n                  <div className=\"col-12 col-md-5 p-0\">\n                    <div className=\"game-of-thromes movie-card\">\n                      <div className=\"card-name\">\n                        <div>\n                          <h3>{data.Title}</h3>\n                          <span className=\"h5\">{data.totalSeasons} Seasons</span>\n                          <span className=\"h5\">{data.episodes ? data.episodes : \"\"}</span>\n                        </div>\n                        <div className=\"rating-section\">\n                          <p className=\"m-0\">iMDB Rating:{data.imdbRating}/10</p>\n                          <p className=\"m-0\">Go to iMDB Page</p>\n                        </div>\n                      </div>\n                      <div className=\"movie-image\">\n                        <img\n                          alt=\"movie\"\n                          src={\n                            data\n                              ? data.Title === \"Game of Thrones\"\n                                ? gamesOfThrones\n                                : data.Title === \"Archer\"\n                                ? archer\n                                : mrRobot\n                              : gamesOfThrones\n                          }\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  <div\n                    className=\"col-6 col-md-3 col-xl-2 p-0 small-card\"\n                    onClick={() => {\n                      getData(\"tt1486217\");\n                    }}\n                  >\n                    <div className=\"small-movie-card\">\n                      <div className=\"movie-img\">\n                        <img alt=\"movie\" src={archer} />\n                      </div>\n                      <div className=\"movie-name\">\n                        <span className=\"h3\">Archer</span>\n                      </div>\n                      <div className=\"movie-rating\">\n                        <span className=\"small\">iMDB Rating: 8.5/10</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div\n                    className=\"col-6 col-md-3 col-xl-2 p-0 small-card\"\n                    onClick={() => {\n                      getData(\"tt4158110\");\n                    }}\n                  >\n                    <div className=\"small-movie-card\">\n                      <div className=\"movie-img\">\n                        <img alt=\"movie\" src={mrRobot} />\n                      </div>\n                      <div className=\"movie-name\">\n                        <span className=\"h3\">Mr. Robot</span>\n                      </div>\n                      <div className=\"movie-rating\">\n                        <span className=\"small\">iMDB Rating: 8.7/10</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"season-list row mx-n2 \">\n                  {[...Array(data.totalSeasons)].map((e, i) => (\n                    <div className=\"season-card col-12 col-md-4 col-xl-2\">\n                      <div className=\"season-content\">\n                        <div className=\"season-details\">\n                          <span className=\"season-name\">Season {i + 1}</span>\n                          <span className=\"imdb\">IMDb</span>\n                        </div>\n                        <div className=\"rating-view\">\n                          <span>Rating:</span>\n                          <div className=\"rating-circle \">\n                            <div className=\"active-border\">\n                              <div className=\"circle\">\n                                <span className=\"prec\">{data.imdbRating}</span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </TabPane>\n              <TabPane tabId=\"2\"></TabPane>\n            </TabContent>\n          </TabPane>\n          <TabPane tabId=\"movies\" className={classnames({ active: activemaintab === \"movies\" })}>\n            Movies Content\n          </TabPane>\n        </TabContent>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}